{"version":3,"sources":["logo.svg","components/Header.jsx","components/About.jsx","components/Place.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","className","Brand","href","React","Component","About","Jumbotron","Place","props","Card","Body","Title","this","info","name","Text","address","tel","variant","Search","state","latitude","longitude","places","checkDistance","bind","location","data","result","isPointWithinRadius","console","log","window","navigator","geolocation","getCurrentPosition","success","setState","coords","placeData","Container","Button","Row","map","i","Col","sm","md","lg","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"q9SAAAA,EAAOC,QAAU,IAA0B,kC,oKCa5BC,E,uKARP,OACI,kBAACC,EAAA,EAAD,CAAQC,UAAU,cACd,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,IAAIF,UAAU,cAAjC,6B,GAJKG,IAAMC,W,QCaZC,E,uKAXP,OACI,kBAACC,EAAA,EAAD,KACI,iHACA,8T,GALIH,IAAMC,W,wDC6BXG,E,kDA3BX,WAAYC,GAAQ,uCACVA,G,qDAIN,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,KAAaC,KAAKJ,MAAMK,KAAKC,MAC7B,kBAACL,EAAA,EAAKM,KAAN,KACI,2BACKH,KAAKJ,MAAMK,KAAKA,MAErB,2BACKD,KAAKJ,MAAMK,KAAKG,SAErB,kCACSJ,KAAKJ,MAAMK,KAAKI,MAG7B,uBAAGf,KAAK,wBAAwBF,UAAU,0BAA0BkB,QAAQ,WAA5E,iD,GAtBAf,IAAMC,W,QCyDXe,E,kDAhDX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,SAAU,EACVC,UAAW,EACXC,OAAQA,GAEZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAPN,E,0DAULC,EAAUC,GACpB,IAAIC,EAASC,8BAAoBH,EAAUC,EAAM,KAEjD,OADAG,QAAQC,IAAIH,GACLA,I,0CAGU,IAAD,OAChBI,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAO,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,EAAQE,OAAOjB,SAAUC,UAAWc,EAAQE,OAAOhB,iB,+BAItF,IAAD,OACDiB,EAAY3B,KAAKQ,MAAMG,OAG3B,OACI,kBAACiB,EAAA,EAAD,KACI,yBAAKxC,UAAU,iCACX,kBAACyC,EAAA,EAAD,CAAQvB,QAAQ,WAAhB,qDAEJ,kBAACwB,EAAA,EAAD,CAAK1C,UAAU,QACVuC,EAAUI,KAAI,SAAChB,EAAMiB,GAElB,GADS,EAAKpB,cAAc,EAAKJ,MAAO,CAAEC,SAAUM,EAAKD,SAASL,SAAUC,UAAWK,EAAKD,SAASJ,YAEjG,OACI,kBAACuB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGhD,UAAU,QACjC,kBAAC,EAAD,CAAOa,KAAMc,c,GAvC5BxB,IAAMC,WCiBZ6C,E,uKAVX,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUG,IAAMC,WCHJ8C,QACW,cAA7BlB,OAAON,SAASyB,UAEe,UAA7BnB,OAAON,SAASyB,UAEhBnB,OAAON,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBxB,WACrBA,UAAUyB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.49bcaf9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Navbar from 'react-bootstrap/NavBar';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"bg-primary\">\r\n                <Navbar.Brand href=\"/\" className=\"text-white\">Hamada Now Takeout's</Navbar.Brand>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Jumbotron, Button } from 'react-bootstrap';\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (   \r\n            <Jumbotron>\r\n                <h1>浜田テイクアウトnowへようこそ</h1>\r\n                <p>\r\n                    あなたの現在位置を使い、周辺一キロ以内のテイクアウト対応店舗を一覧で表示してくれるアプリです。\r\n                </p>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass Place extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Card.Body>\r\n                    <Card.Title>{this.props.info.name}</Card.Title>\r\n                    <Card.Text>\r\n                        <p>\r\n                            {this.props.info.info}\r\n                        </p>\r\n                        <p>\r\n                            {this.props.info.address}\r\n                        </p>\r\n                        <p>\r\n                            TEL:{this.props.info.tel}\r\n                        </p>\r\n                    </Card.Text>\r\n                    <a href=\"{this.props.info.url}\" className=\"btn btn-outline-success\" variant=\"primary\" >Webサイトをみる</a>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Place;","import React from 'react';\r\nimport { isPointWithinRadius } from 'geolib';\r\nimport { Row, Col, Container, Button, Card } from 'react-bootstrap';\r\n\r\n// import Place component\r\nimport Place from './Place.jsx';\r\n\r\n// import Place data\r\nimport places from '../data/places.json';\r\n\r\nclass Search extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            latitude: 0,\r\n            longitude: 0,\r\n            places: places\r\n        }\r\n        this.checkDistance = this.checkDistance.bind(this);\r\n    }\r\n\r\n    checkDistance(location, data) {\r\n        let result = isPointWithinRadius(location, data, 1000);\r\n        console.log(result);\r\n        return result;\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            success => this.setState({ latitude: success.coords.latitude, longitude: success.coords.longitude })\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let placeData = this.state.places;\r\n        let result = false;\r\n\r\n        return (\r\n            <Container>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <Button variant=\"primary\">最寄りのお店一覧</Button>\r\n                </div>\r\n                <Row className=\"mt-5\">\r\n                    {placeData.map((data, i) => {\r\n                        result = this.checkDistance(this.state, { latitude: data.location.latitude, longitude: data.location.longitude });\r\n                        if (result) {\r\n                            return (\r\n                                <Col sm={12} md={4} lg={4} className=\"mt-2\">\r\n                                    <Place info={data} />\r\n                                </Col>\r\n                            );\r\n                        }\r\n                    })}\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// import Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// import React-Bootstrap COmponent's\nimport Container from 'react-bootstrap/Container'\n\n// import component's\nimport Header from './components/Header.jsx';\nimport About from './components/About.jsx';\nimport Search from './components/Search.jsx';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <About />\n        <Search />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}